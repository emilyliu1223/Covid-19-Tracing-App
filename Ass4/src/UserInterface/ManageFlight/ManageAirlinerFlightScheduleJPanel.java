/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageFlight;

import Business.Flight;
import Business.FlightDirectory;
import Business.User.Airliner;
import UserInterface.ManageCustomer.NewFlightJPanel;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class ManageAirlinerFlightScheduleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageAirlinerFlightScheduleJPanel
     */
    private JPanel rightPanel;
    private FlightDirectory flightDirectory;
    private String str_airliner;
    private List<String> listforId;
    //private Airliner airliner;
    public ManageAirlinerFlightScheduleJPanel(JPanel rightPanel, String str_airliner,FlightDirectory flightDirectory) {
        //To change body of generated methods, choose Tools | Templates.
        initComponents();
        this.rightPanel=rightPanel;
        this.flightDirectory=flightDirectory;
        this.str_airliner=str_airliner;
        //this.airliner=airliner;
        populate();
    }

//    }
     public void populate(){
        
        DefaultTableModel dtm = (DefaultTableModel)tableManageFlight.getModel();
        dtm.setRowCount(0);
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");  
          
    //check time and date format
    //use airliner name to find all dlight 
    for(Flight flightlist: flightDirectory.getFlightlist()){
        if(flightlist.getAirliner().toLowerCase().equals(str_airliner.toLowerCase())){
           //System.out.println("enter populate flight table//airliner name:"+airliner);
                
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=flightlist.getAirliner();
            row[1]=flightlist.getFlightnumber();
            row[2]=flightlist.getFrom()+"-"+flightlist.getTo();
            row[3]=flightlist.getFromtime();
            String strfromDate = formatter.format(flightlist.getFromdate());
            row[4]=strfromDate;
            row[5]=flightlist.getTotime();
            String strtoDate = formatter.format(flightlist.getTodate());
            row[6]=strtoDate;
            row[7]=flightlist.getEstimation();
            dtm.addRow(row);
            
        }
    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnNewFlight = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableManageFlight = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        btnNewFlight.setText("New Flight");
        btnNewFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewFlightActionPerformed(evt);
            }
        });

        tableManageFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Airliner", "Flight Number", "From", "FromTime", "FromDate", "ToTime", "ToDate", "Estimation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableManageFlight);
        if (tableManageFlight.getColumnModel().getColumnCount() > 0) {
            tableManageFlight.getColumnModel().getColumn(0).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(1).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(2).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(3).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(4).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(5).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(6).setResizable(false);
            tableManageFlight.getColumnModel().getColumn(7).setResizable(false);
        }

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNewFlight))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(201, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewFlight)
                    .addComponent(btnBack))
                .addContainerGap(134, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewFlightActionPerformed
        // TODO add your handling code here:
        CardLayout layout = (CardLayout)rightPanel.getLayout();
        rightPanel.add(new NewFlightJPanel(rightPanel, flightDirectory,str_airliner));
        layout.next(rightPanel);
    }//GEN-LAST:event_btnNewFlightActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
        CardLayout layout = (CardLayout)rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNewFlight;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableManageFlight;
    // End of variables declaration//GEN-END:variables
}
