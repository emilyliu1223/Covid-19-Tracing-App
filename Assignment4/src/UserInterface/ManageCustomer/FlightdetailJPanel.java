/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageCustomer;

import Business.CustomerDirectory;
import Business.Flight;
import Business.FlightDirectory;
import Business.User.Customer;
//import static com.sun.xml.internal.fastinfoset.alphabet.BuiltInRestrictedAlphabets.table;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ComponentAdapter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.Month;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
//import org.jdesktop.swingx.decorator.HighlightPredicate;

/**
 *
 * @author user
 */
public class FlightdetailJPanel extends javax.swing.JPanel  {

    /**
     * Creates new form FlightdetailJPanel
     */
    private Customer customer;
    private JPanel rightPanel;
    private FlightDirectory flightDir;
    private List<Customer> cuslist;
    private CustomerDirectory cusDir;
    private String selecteElement;
//    private Customer customer;
    
    private Flight flight;
    private Date start;
    private Date end;
    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy"); 
    
    public DefaultTableCellRenderer DEFAULT_RENDERER ;
    FlightdetailJPanel(JPanel rightPanel, List<Customer> cuslist, CustomerDirectory cusDir,FlightDirectory flightDir, Flight flight)  {
         //To change body of generated methods, choose Tools | Templates.
         initComponents();
         this.rightPanel=rightPanel;
         this.flight=flight;
         this.flightDir=flightDir;
         this.cuslist=cuslist;
         this.cusDir=cusDir;
         this.customer=customer;
         populate();
          List <Flight> flightlist1=new ArrayList<Flight>();
         checkbutton.setEnabled(true);
         this.selecteElement=selecteElement;
       //  System.out.println(flight.getID());
         
        
          
      // System.out.println(isOverlapping(formatter.parse(flightDir.getFlightlist().get(3).getFromdate()),formatter.parse(flightDir.getFlightlist().get(3).getTodate()),formatter.parse(flight.getFromdate()),formatter.parse(flight.getTodate())));
     
       
             
    
    
    
    
    
    }
    
     public void populate(){
        
        DefaultTableModel dtm = (DefaultTableModel)tableSeats.getModel();
        dtm.setRowCount(0);

    //check time and date format
    //use airliner name to find all dlight 

       for(int i=0;i<26;i++){
           //System.out.println("enter populate flight table//airliner name:"+airliner);
                
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]="A"+(i+1);
            row[1]="B"+(i+1);
            row[2]="C"+(i+1);
            row[3]="D"+(i+1);
            row[4]="E"+(i+1);
            row[5]="F"+(i+1);
          
            dtm.addRow(row);
       }
           
  
}
   
    public static boolean isOverlapping(Date start1, Date end1, Date start2, Date end2, LocalTime a1, LocalTime b1, LocalTime a2, LocalTime b2)throws ParseException {
   
    LocalDate s1 = start1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDateTime dateTime1 = s1.atTime(a1);
    
     LocalDate s2 = start2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDateTime dateTime2 = s2.atTime(a2);
    
    LocalDate e1 = end1.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDateTime dateTime3 = e1.atTime(b1);
    
    LocalDate e2 = end2.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    LocalDateTime dateTime4 = e2.atTime(b2);  
   return (dateTime1.isBefore(dateTime4)||dateTime1.isEqual(dateTime4))&&(dateTime2.isBefore(dateTime3)||dateTime2.isEqual(dateTime3));
}

                           
       
        
          
           
    
  
    
          

     
    
              
                

     

    

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableSeats = new javax.swing.JTable()
        {
            @Override
            public Component prepareRenderer (TableCellRenderer renderer, int rowIndex, int columnIndex){
                Component componenet = super.prepareRenderer(renderer, rowIndex, columnIndex);
                Object value = getModel().getValueAt(rowIndex,columnIndex);
                ArrayList<String> id=new ArrayList<String>();
                for(Customer cs:cuslist){
                    id.add(cs.getSeat());
                }

                if(id.contains(value)){
                    componenet.setBackground(Color.RED);
                    componenet.setForeground(Color.BLACK);
                }

                else{

                    componenet.setBackground(Color.GREEN);
                    componenet.setForeground(Color.BLACK);
                }

                return componenet;
            }}
            ;
            jLabel1 = new javax.swing.JLabel();
            txtName = new javax.swing.JTextField();
            txtID = new javax.swing.JTextField();
            jLabel2 = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            txtAge = new javax.swing.JTextField();
            jLabel4 = new javax.swing.JLabel();
            txtNation = new javax.swing.JTextField();
            jLabel5 = new javax.swing.JLabel();
            txtPhone = new javax.swing.JTextField();
            jLabel6 = new javax.swing.JLabel();
            txtAddress = new javax.swing.JTextField();
            btnBook = new javax.swing.JButton();
            checkbutton = new javax.swing.JButton();

            tableSeats.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null}
                },
                new String [] {
                    "Window", "Middle", "Aisle", "Aisle", "Middle", "Window"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
                };
                boolean[] canEdit = new boolean [] {
                    false, false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            tableSeats.setRowSelectionAllowed(false);
            tableSeats.setSelectionBackground(new java.awt.Color(255, 0, 0));
            tableSeats.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
            tableSeats.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    tableSeatsMouseClicked(evt);
                }
            });
            tableSeats.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentShown(java.awt.event.ComponentEvent evt) {
                    tableSeatsComponentShown(evt);
                }
            });
            tableSeats.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                public void propertyChange(java.beans.PropertyChangeEvent evt) {
                    tableSeatsPropertyChange(evt);
                }
            });
            jScrollPane1.setViewportView(tableSeats);

            jLabel1.setText("Name");

            txtName.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtNameActionPerformed(evt);
                }
            });

            jLabel2.setText("ID");

            jLabel3.setText("Age");

            jLabel4.setText("Nationality");

            txtNation.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtNationActionPerformed(evt);
                }
            });

            jLabel5.setText("Phone");

            txtPhone.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    txtPhoneActionPerformed(evt);
                }
            });

            jLabel6.setText("Address");

            btnBook.setText("Confirm booking");
            btnBook.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnBookActionPerformed(evt);
                }
            });

            checkbutton.setText("Check out your information");
            checkbutton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    checkbuttonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(86, 86, 86)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(33, 33, 33)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                .addComponent(txtID))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(40, 40, 40)
                                    .addComponent(jLabel3)
                                    .addGap(24, 24, 24)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtAge, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                .addComponent(txtNation)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(136, 136, 136)
                            .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(60, 60, 60)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel5)
                                    .addGap(35, 35, 35)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(checkbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(66, 230, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(31, 31, 31)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(29, 29, 29)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4)
                        .addComponent(txtNation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBook)
                        .addComponent(checkbutton))
                    .addContainerGap(63, Short.MAX_VALUE))
            );
        }// </editor-fold>//GEN-END:initComponents

    private void tableSeatsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSeatsMouseClicked
        // TODO add your handling code here:
         //tableSeats.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
         
                txtName.setText("");
                 txtNation.setText("");
                txtAddress.setText("");
                txtID.setText("");
                txtAge.setText("");
                txtPhone.setText("");
                  txtName.setEditable(true);
                txtNation.setEditable(true);
                   txtAddress.setEditable(true);
                    txtID.setEditable(true);
                      txtAge.setEditable(true);
                   txtPhone.setEditable(true);
                   checkbutton.setEnabled(true);
          
      int row = tableSeats.getSelectedRow();
      int column = tableSeats.getSelectedColumn();
        Object target= (Object) tableSeats.getValueAt(row, column);
   
       if(cuslist.isEmpty()==false){
         for(Customer customer:cuslist){
        if(customer.getSeat().equals(target)){ 
                txtName.setText(customer.getName());
                txtNation.setText(customer.getNationality());
                txtAddress.setText(customer.getAddress());
                txtID.setText(customer.getID());
                txtAge.setText(String.valueOf(customer.getAge()));
                txtPhone.setText(customer.getPhone());
                
                txtName.setEditable(false);
                txtNation.setEditable(false);
                   txtAddress.setEditable(false);
                    txtID.setEditable(false);
                      txtAge.setEditable(false);
                   txtPhone.setEditable(false);
                   btnBook.setEnabled(false);
                   checkbutton.setEnabled(false);
                   selecteElement=(String)target;
                  
        }
        else if(!customer.getSeat().equals(target)){
        selecteElement=(String)target;
       
        }
       }}
       else {
       selecteElement=(String)target;      
       }
        
               
    }//GEN-LAST:event_tableSeatsMouseClicked

    private void txtNationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNationActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void tableSeatsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableSeatsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tableSeatsPropertyChange

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        // TODO add your handling code here:
       
     ArrayList<Flight>ar=new ArrayList<Flight>();
     int age;
    for(Flight aflight:flightDir.getFlightlist()){
        if(aflight.getID().contains(txtID.getText()))
     ar.add(aflight);
   
}                     
        if(flight.getID().isEmpty()){
         if(ar.isEmpty()){
             try{
                 age=Integer.parseInt(txtAge.getText());
             }catch(Exception e){
                 JOptionPane.showMessageDialog(null, "age must be integer");
                 txtAge.setText("");
                 return;
             }
                 customer=new Customer(txtName.getText(),txtNation.getText(),age,txtAddress.getText(),txtPhone.getText());
                             customer.setSeat(selecteElement);
                             customer.setFlightnumber(flight.getFlightnumber());
                             customer.setID(txtID.getText());
                             cuslist.add(customer);
                             cusDir.getCustomerlist().add(customer);
                             flight.getID().add(txtID.getText()); 
                             JOptionPane.showMessageDialog(null,"OK, you are registered");
                             checkbutton.setEnabled(true);
                             System.out.println(customer);
                 }
                 if(!ar.isEmpty()){
                     try{
                           for(Flight flightn:ar){
                             if(isOverlapping(formatter.parse(flightn.getFromdate()),formatter.parse(flightn.getTodate()),formatter.parse(flight.getFromdate()),formatter.parse(flight.getTodate()),flightn.getFromtime(),flightn.getTotime(),flight.getFromtime(),flight.getTotime())){
                                 JOptionPane.showMessageDialog(null, "You have a overlap flight");   
                                 checkbutton.setEnabled(false);
                                 
                                   break; 
                             }
                             if(!isOverlapping(formatter.parse(flightn.getFromdate()),formatter.parse(flightn.getTodate()),formatter.parse(flight.getFromdate()),formatter.parse(flight.getTodate()),flightn.getFromtime(),flightn.getTotime(),flight.getFromtime(),flight.getTotime())){
                             try{
                 age=Integer.parseInt(txtAge.getText());
             }catch(Exception e){
                 JOptionPane.showMessageDialog(null, "age must be integer");
                 txtAge.setText("");
                 return;
             }
                                 customer=new Customer(txtName.getText(),txtNation.getText(),age,txtAddress.getText(),txtPhone.getText());
                             customer.setSeat(selecteElement);
                             customer.setFlightnumber(flight.getFlightnumber());
                             customer.setID(txtID.getText());
                             cuslist.add(customer);
                             cusDir.getCustomerlist().add(customer);
                             flight.getID().add(txtID.getText()); 
                             JOptionPane.showMessageDialog(null,"OK");
                             checkbutton.setEnabled(true);
                             }
                              }          
                     }
                                  catch(Exception e){
                                      JOptionPane.showMessageDialog(null, "wrong date type");
                           }
                    
                 }
 
        
        }else{
            if(flight.getID().contains(txtID.getText())){
                 JOptionPane.showMessageDialog(null, "Same ID is used to book this flight");  
               checkbutton.setEnabled(false);
                      
                 }
                 if(!flight.getID().contains(txtID.getText())){
                 if(ar.isEmpty()){
                     try{
                 age=Integer.parseInt(txtAge.getText());
             }catch(Exception e){
                 JOptionPane.showMessageDialog(null, "age must be integer");
                 txtAge.setText("");
                 return;
             }
                 customer=new Customer(txtName.getText(),txtNation.getText(),age,txtAddress.getText(),txtPhone.getText());
                             customer.setSeat(selecteElement);
                             customer.setFlightnumber(flight.getFlightnumber());
                             customer.setID(txtID.getText());
                             cuslist.add(customer);
                             cusDir.getCustomerlist().add(customer);
                             flight.getID().add(txtID.getText()); 
                             JOptionPane.showMessageDialog(null,"OK, you are registered");
                             checkbutton.setEnabled(true);
                       
                 }
                 if(!ar.isEmpty()){
                     try{
                           for(Flight flightn:ar){
                             if(isOverlapping(formatter.parse(flightn.getFromdate()),formatter.parse(flightn.getTodate()),formatter.parse(flight.getFromdate()),formatter.parse(flight.getTodate()),flightn.getFromtime(),flightn.getTotime(),flight.getFromtime(),flight.getTotime())){
                                 JOptionPane.showMessageDialog(null, "You have a overlap flight");   
                                 checkbutton.setEnabled(false);
                                 
                                   break; 
                             }
                             if(!isOverlapping(formatter.parse(flightn.getFromdate()),formatter.parse(flightn.getTodate()),formatter.parse(flight.getFromdate()),formatter.parse(flight.getTodate()),flightn.getFromtime(),flightn.getTotime(),flight.getFromtime(),flight.getTotime())){
                             try{
                 age=Integer.parseInt(txtAge.getText());
             }catch(Exception e){
                 JOptionPane.showMessageDialog(null, "age must be integer");
                 txtAge.setText("");
                 return;
             }
                                 customer=new Customer(txtName.getText(),txtNation.getText(),age,txtAddress.getText(),txtPhone.getText());
                             customer.setSeat(selecteElement);
                             customer.setFlightnumber(flight.getFlightnumber());
                             customer.setID(txtID.getText());
                             cuslist.add(customer);
                             cusDir.getCustomerlist().add(customer);
                             flight.getID().add(txtID.getText()); 
                             JOptionPane.showMessageDialog(null,"OK");
                             
                             }
                              }          
                     }
                 
                                  catch(Exception e){
                                      JOptionPane.showMessageDialog(null, "wrong date type");
                           }
                    
                 }
                 }                    
                   }
        
        for(Flight flightn:flightDir.getFlightsforCustomer(txtID.getText())){
             flightn.getFlightnumber();
                                 
                             }

    }//GEN-LAST:event_btnBookActionPerformed

    private void tableSeatsComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_tableSeatsComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_tableSeatsComponentShown

    private void checkbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkbuttonActionPerformed
        // TODO add your handling code here:
        rightPanel.add(new ConfirmationJPanel(rightPanel,customer));
        CardLayout layout=(CardLayout)rightPanel.getLayout();
        layout.next(rightPanel);
    }//GEN-LAST:event_checkbuttonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton checkbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableSeats;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNation;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables
}
