/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManageCustomer;

import Business.AirlinerDirectory;
import Business.CustomerDirectory;
import Business.Flight;
import Business.FlightDirectory;
import Business.User.Customer;
import UserInterface.ManageAirliner.ManageAirlinersJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class FlightsfoundJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FlightsfoundJPanel
     */
    private JPanel rightPanel;
    private FlightDirectory flightDir;
    private List<Flight>flightl;
    private CustomerDirectory cusDir;
    private List<Customer> cuslist;
   private AirlinerDirectory airliner;
  private Flight targetflight;
   
    FlightsfoundJPanel(JPanel rightPanel,FlightDirectory flightDir, List<Flight> flightl, CustomerDirectory cusDir, AirlinerDirectory airliner) {
        //To change body of generated methods, choose Tools | Templates.
        initComponents();
         this.flightl=flightl;
        this.airliner=airliner;
      targetflight=new Flight();
       this.flightDir=flightDir; 
        this.rightPanel=rightPanel;
        this.cusDir=cusDir;      
        cuslist=new ArrayList<Customer>();
        populate();
    }    
     public void populate(){        
        DefaultTableModel dtm = (DefaultTableModel)tableFlight.getModel();
        dtm.setRowCount(0);   
    for(Flight flightlist: flightl){                     
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=flightlist.getAirliner();
            row[1]=flightlist.getFlightnumber();
            row[2]=flightlist.getFrom()+"-"+flightlist.getTo();
            row[3]=flightlist.getFromtime();
            //String strfromDate = formatter.format(flightlist.getFromdate());
            row[4]=flightlist.getFromdate();
            row[5]=flightlist.getTotime();
            //String strtoDate = formatter.format(flightlist.getTodate());
            row[6]=flightlist.getTodate();
            row[7]=flightlist.getEstimation();
            dtm.addRow(row);
            
        }
    
     }
       public void populateAirliner(){
        
        DefaultTableModel dtm = (DefaultTableModel)tableFlight.getModel();
        dtm.setRowCount(0);
        //SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");  
          
    //check time and date format
    //use airliner name to find all dlight 
    for(Flight flightlist: flightl){
        if(flightlist.getAirliner().equalsIgnoreCase(txtAirliner.getText())){
                
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=flightlist.getAirliner();
            row[1]=flightlist.getFlightnumber();
            row[2]=flightlist.getFrom()+"-"+flightlist.getTo();
            row[3]=flightlist.getFromtime();
           // String strfromDate = formatter.format(flightlist.getFromdate());
            row[4]=flightlist.getFromdate();
            row[5]=flightlist.getTotime();
            //String strtoDate = formatter.format(flightlist.getTodate());
            row[6]=flightlist.getTodate();
            row[7]=flightlist.getEstimation();
            dtm.addRow(row);
            
        }
    
     }}
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        txtAirliner = new javax.swing.JTextField();
        btnSelect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnback = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableFlight = new javax.swing.JTable();

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("search by Airliner");

        btnback.setText("<<back");
        btnback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackActionPerformed(evt);
            }
        });

        tableFlight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Airliner", "Flight Number", "From", "FromTime", "FromDate", "ToTime", "ToDate", "Estimation"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableFlight);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtAirliner, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSearch)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSelect))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 705, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnback)))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnback)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAirliner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)))
                    .addComponent(btnSelect))
                .addContainerGap(136, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackActionPerformed
        // TODO add your handling code here:
       flightl.removeAll(flightl);
        rightPanel.remove(this.rightPanel);
        CardLayout layout = (CardLayout)rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_btnbackActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
         int select = tableFlight.getSelectedRow();
        if(select<0){
            JOptionPane.showMessageDialog(null, "must select a row","Warning", JOptionPane.WARNING_MESSAGE);
        }else{
           String findFlightNum = (String)tableFlight.getValueAt(select, 1);
           
        for(Customer customer:cusDir.getCostumerinFlight(findFlightNum)){
            cuslist.add(customer);}
         for(Flight flight:flightl){
            if(flight.getFlightnumber().equalsIgnoreCase(findFlightNum)){
               targetflight=flight;
            }
        }
         if(targetflight!=null){
             rightPanel.add(new FlightdetailJPanel(rightPanel,cuslist,cusDir,flightDir,targetflight ));
                   CardLayout layout=(CardLayout)rightPanel.getLayout();
                 layout.next(rightPanel);
         }
            }
 
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
       if(txtAirliner.getText().equals("")){
           JOptionPane.showMessageDialog(null, "please enter airliner name to search.");
           txtAirliner.setText("");
           return;
       }else{
       populateAirliner();}
    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableFlight;
    private javax.swing.JTextField txtAirliner;
    // End of variables declaration//GEN-END:variables
}
