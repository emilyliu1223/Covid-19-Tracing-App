/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.QuarantineRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.QuarantineOrganization;
import Business.Organization.ReceptionOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTest_doctorQuarantine;
import Business.WorkQueue.WorkQueue_doctorQuarantine;
import Business.WorkQueue.WorkRequest_doctorQuarantine;
import Business.WorkQueue.WorkRequest_quarantineCDC;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author stacyhuang
 */
public class QuarantineWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form QuarantineWorkAreaJPanel
     */
    private JPanel jpanel;
    private QuarantineOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem system;
    //private int caseNumber=0;
    private WorkRequest_doctorQuarantine thisrequest;
    public QuarantineWorkAreaJPanel(JPanel jpanel, UserAccount userAccount, QuarantineOrganization organization, Enterprise enterprise, EcoSystem system) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        initComponents();
        this.jpanel = jpanel;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = userAccount;
        this.system=system;
        //this.request=null;
        ButtonGroup b=new ButtonGroup();
        b.add(positive);
        b.add(negative);
        setField(false);
        messagearea.setEditable(false);
        messagearea.setText("");
        popQuarantineTable();
        setCombo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        quarantineTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        symptonfield = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        diagnosisfield = new javax.swing.JTextArea();
        positive = new javax.swing.JRadioButton();
        negative = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        savebtn = new javax.swing.JButton();
        reportbtn = new javax.swing.JButton();
        selectbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        typefield = new javax.swing.JTextField();
        resultfield = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        doctorfield = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        networkJComboBox = new javax.swing.JComboBox();
        enterpriseTypeJComboBox = new javax.swing.JComboBox();
        inspectorfield = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        messagearea = new javax.swing.JTextArea();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        quarantineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Quarantin ID", "date", "ID", "First Name", "Last Name", "test type", "status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(quarantineTable);
        if (quarantineTable.getColumnModel().getColumnCount() > 0) {
            quarantineTable.getColumnModel().getColumn(0).setResizable(false);
            quarantineTable.getColumnModel().getColumn(1).setResizable(false);
            quarantineTable.getColumnModel().getColumn(2).setResizable(false);
            quarantineTable.getColumnModel().getColumn(3).setResizable(false);
            quarantineTable.getColumnModel().getColumn(4).setResizable(false);
            quarantineTable.getColumnModel().getColumn(5).setResizable(false);
            quarantineTable.getColumnModel().getColumn(6).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 38, 997, 153));

        jLabel1.setText("Symptons:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 370, -1, -1));

        symptonfield.setColumns(20);
        symptonfield.setRows(5);
        jScrollPane2.setViewportView(symptonfield);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, 180, -1));

        jLabel2.setText("Diagnosis:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 370, -1, -1));

        diagnosisfield.setColumns(20);
        diagnosisfield.setRows(5);
        jScrollPane3.setViewportView(diagnosisfield);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 177, -1));

        positive.setText("Positive");
        positive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positiveActionPerformed(evt);
            }
        });
        add(positive, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 232, -1, -1));

        negative.setText("Negative");
        add(negative, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 266, -1, -1));

        jLabel3.setText("Result:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(498, 202, -1, -1));

        savebtn.setText("Save to Document");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });
        add(savebtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 460, 167, -1));

        reportbtn.setText("Report it to CDC");
        reportbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportbtnActionPerformed(evt);
            }
        });
        add(reportbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 460, 159, -1));

        selectbtn.setText("select");
        selectbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectbtnActionPerformed(evt);
            }
        });
        add(selectbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(922, 197, -1, -1));

        jLabel5.setText("testing type");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 202, 79, -1));
        add(typefield, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 197, 174, -1));
        add(resultfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 310, 180, -1));

        jLabel8.setText("result");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 79, -1));
        add(doctorfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 232, 174, -1));

        jLabel9.setText("responsible doctor");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 237, 124, -1));

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });
        add(networkJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 370, 159, -1));

        enterpriseTypeJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(enterpriseTypeJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 410, 159, -1));
        add(inspectorfield, new org.netbeans.lib.awtextra.AbsoluteConstraints(196, 270, 174, -1));

        jLabel10.setText("responsible inspector");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 275, -1, -1));

        jLabel4.setText("message to CDC");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(639, 202, -1, -1));

        messagearea.setColumns(20);
        messagearea.setRows(5);
        jScrollPane4.setViewportView(messagearea);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 230, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void setField(boolean boo){
        negative.setEnabled(boo);positive.setEnabled(boo);
        savebtn.setEnabled(boo);reportbtn.setEnabled(boo);
        typefield.setEditable(boo);doctorfield.setEditable(boo);
        inspectorfield.setEditable(boo);diagnosisfield.setEditable(boo);
        resultfield.setEditable(boo);symptonfield.setEditable(boo);doctorfield.setEditable(boo);
        
    }
    public void setCombo(){
        networkJComboBox.removeAllItems();
        for (Network network : system.getNetworkList()) {
            networkJComboBox.addItem(network);
        }
    }
    public void setEnterprise(Network network){
        enterpriseTypeJComboBox.removeAllItems();
        for(Enterprise e:network.getEnterpriseDirectory().getEnterpriseList()){
            if(e.getEnterpriseType().getValue().equals("CDC")){
                enterpriseTypeJComboBox.addItem(e);
            }
        }
    }
   
    public void popQuarantineTable(){
        DefaultTableModel model = (DefaultTableModel) quarantineTable.getModel();
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        model.setRowCount(0);
        for(WorkRequest_doctorQuarantine request:organization.getWorkQueue_doctorQuarantine().getWorkRequestList()){
            Object row[]=new Object[7];
            row[0]=request;
            row[1]=formatter.format(request.getDate());
            row[2]=request.getPatient().getId();
            row[3]=request.getPatient().getName().split(" ")[0];
            row[4]=request.getPatient().getName().split(" ")[1];
            row[5]=request.getTestType();
            row[6]=request.getStatus();
           
            model.addRow(row);
        }
        
    }
    private void positiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positiveActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed
        // TODO add your handling code here:
        Date date=new Date();
        if(positive.isSelected()==false&&negative.isSelected()==false){
            JOptionPane.showMessageDialog(null, "please update result");
            return;
        }else{
            if(positive.isSelected()){
                (thisrequest).setResult("positive");
            }else{
                (thisrequest).setResult("negative");
            }
            thisrequest.setDate(date);
            thisrequest.setStatus("finish test");
            thisrequest.setInspector(userAccount);
            JOptionPane.showMessageDialog(null, "save success");
            resultfield.setText(thisrequest.getResult());
            inspectorfield.setText(thisrequest.getInspector().getEmployee().getName());
            negative.setEnabled(false);positive.setEnabled(false);
            thisrequest.setMessage(messagearea.getText());
            popQuarantineTable();
        }
    }//GEN-LAST:event_savebtnActionPerformed

    private void selectbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectbtnActionPerformed
        // TODO add your handling code here:
        int select=quarantineTable.getSelectedRow();
        if(select<0){
            JOptionPane.showMessageDialog(null, "please select");
            return;
        }else{
            negative.setEnabled(true);positive.setEnabled(true);
            savebtn.setEnabled(true);reportbtn.setEnabled(true);
            messagearea.setEditable(true);
            WorkRequest_doctorQuarantine request=(WorkRequest_doctorQuarantine) quarantineTable.getValueAt(select, 0);
           
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            this.thisrequest=request;
           
            typefield.setText(request.getTestType());
            doctorfield.setText(request.getDoctor().getEmployee().getName());
            resultfield.setText(request.getResult());
            if(request.getResult().equals("positive")){
                    positive.setSelected(true);
                }else if(request.getResult().equals("negative")){
                    negative.setSelected(true);
                }
            diagnosisfield.setText(request.getDiagnosis());
            String sym="";
            for(String str:request.getSymptoms()){
                sym+=(str+",");
            }
            symptonfield.setText(sym);
            messagearea.setText(request.getMessage());
            if(request.getInspector()!=null){
                inspectorfield.setText(request.getInspector().getEmployee().getName());
            }else{
                inspectorfield.setText("");
            }
        }
    }//GEN-LAST:event_selectbtnActionPerformed

    private void reportbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportbtnActionPerformed
        // TODO add your handling code here:
        ReceptionOrganization org=null;
        Enterprise en=(Enterprise) enterpriseTypeJComboBox.getSelectedItem();
        //int select=quarantineTable.getSelectedRow();
       
            //WorkRequest_doctorQuarantine request = (WorkRequest_doctorQuarantine)quarantineTable.getValueAt(select, 0);
            if(thisrequest.getStatus().equals("finish test")){
                thisrequest.setStatus("sent to CDC");
                popQuarantineTable();
                WorkRequest_quarantineCDC toCDC=new WorkRequest_quarantineCDC();
                int c=system.getCaseCount()+1;
                system.setCaseCount(c);
                System.out.println("in quarantine: case number "+c);
                String message=messagearea.getText();
                toCDC.setMessage(message);
                toCDC.setCaseNumber(c);
                toCDC.setDate(thisrequest.getDate());
                toCDC.setPatient(thisrequest.getPatient());
                toCDC.setStatus("sent to CDC");
                toCDC.setEnterprise(enterprise);
                toCDC.setSymptons(symptonfield.getText());
                for(Organization o:en.getOrganizationDirectory().getOrganizationList()){
                    if(o instanceof ReceptionOrganization){
                        org=(ReceptionOrganization) o;
                        break;
                    }
                }
                System.out.println("send to:"+org);
                org.getWorkQueue_quarantineCDC().getWorkRequestList().add(toCDC);
                System.out.println("size:"+org.getWorkQueue_quarantineCDC().getWorkRequestList().size());
            }else{
                JOptionPane.showMessageDialog(null, "need to update result");
                return;
            }
        
    }//GEN-LAST:event_reportbtnActionPerformed

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed
        // TODO add your handling code here:
        Network network=(Network)networkJComboBox.getSelectedItem();
        if(network!=null){
            setEnterprise(network);
        }
    }//GEN-LAST:event_networkJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea diagnosisfield;
    private javax.swing.JTextField doctorfield;
    private javax.swing.JComboBox enterpriseTypeJComboBox;
    private javax.swing.JTextField inspectorfield;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea messagearea;
    private javax.swing.JRadioButton negative;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JRadioButton positive;
    private javax.swing.JTable quarantineTable;
    private javax.swing.JButton reportbtn;
    private javax.swing.JTextField resultfield;
    private javax.swing.JButton savebtn;
    private javax.swing.JButton selectbtn;
    private javax.swing.JTextArea symptonfield;
    private javax.swing.JTextField typefield;
    // End of variables declaration//GEN-END:variables
}
